## NodeJS Unimed - Busybox - rodando no ambiente de desenvolvimento
# Este projeto é voltado para testes unistário em estágios do CI;

image: docker:latest
services:
    - docker:dind
stages:
    - Dev
    - Dev-publish
    - Prod-Tag
    - Prod-publish
    - Deployment

variables:
    REGISTRY: harbor.unimednatal.com.br
    REPOSITORY: busybox-nodejs/unimed/nodejs-busybox 

before_script:
    # verificando a VERSÃO do arquivo
    - if [ ! -f VERSION ]; then echo "A versão dessa imagem não foi encotrada!"; exit 1; else export VERSION=$(cat VERSION); fi
    - 'echo "Executando Pipeline para a imagem: $REGISTRY/$REPOSITORY:${VERSION}"'

build:
    stage: Dev
    script:
        - docker build -t $REGISTRY/$REPOSITORY .
        - docker save $REGISTRY/$REPOSITORY > image.tar
        - docker image ls
    artifacts:
        paths:
            - image.tar
    tags:
        - node-busy
    only:
        - docker/nodejsbusybox

dev-publish:
    stage: Dev-publish
    dependencies: 
        - build
    script:
        # verificando as variáves "$REGISTRY_USER" e "$REGISTRY_PW"
        - if [ -z ${REGISTRY_USER+x} ]; then echo "A variável "REGISTRY_USER" não foi definida!"; exit 1; fi
        - if [ -z ${REGISTRY_PW+x} ]; then echo "A variável "REGISTRY_PW" não foi definida!"; exit 1; fi
        # relizando login no registro do docker (Harbor)
        - docker login -u $REGISTRY_USER -p $REGISTRY_PW $REGISTRY
        # pré-carregando versões de imagens antigas (backup)
        - docker load -i image.tar
        # enviando nova imagem ao registro do docker (harbor)
        - docker tag $REGISTRY/$REPOSITORY:latest $REGISTRY/$REPOSITORY:latest-dev
        - docker push $REGISTRY/$REPOSITORY:latest-dev
    tags:
        - node-busy
    only:
        - docker/nodejsbusybox

publish:
    stage: Prod-publish
    dependencies:
        - build
        - tag
    script:
        # carrengando as variáveis "$REGISTRY_USER" e "$REGISTRY_PW" 
        - if [ -z ${REGISTRY_USER+x} ]; then echo "REGISTRY_USER não definida!"; exit 1; fi
        - if [ -z ${REGISTRY_PW+x} ]; then echo "REGISTRY_PW não definida!"; exit 1; fi
        # login no registro docker (Harbor)
        - docker login -u $REGISTRY_USER -p $REGISTRY_PW $REGISTRY
        # verificando as imagens antigas (Host)
        - docker load -i image.tar
        # Enviando a nova imagem ao repositório (Harbor)
        - docker tag $REGISTRY/$REPOSITORY:latest $REGISTRY/$REPOSITORY:$VERSION
        - docker push $REGISTRY/$REPOSITORY:$VERSION
    tags:
        - node-busy
    only:
        - docker/nodejsbusybox

tag:
    image: python:3.7-stretch
    stage: Prod-Tag
    script:
        - mkdir -p ~/.ssh && chmod 700 ~/.ssh
        # utilizando a chave ssh para realizar o tagueamento da nova imagem
        - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
        - eval $(ssh-agent -s)
        #- echo -n "$SSH_DEPLOY_KEY" | tr -d '\r' | ssh-add - > /dev/null
        - chmod +x tag.py
        - ./tag.py
    #when: manual
    allow_failure: false
    tags:
        - node-busy
    only:
        - docker/nodejsbusybox

docker_deployment:
    stage: Deployment
    script:
        - cd /home/unimed/Projetos/nodejs-busybox; make deploy_docker
    #when: manual
    allow_failure: false
    tags:
        - node-busy
    only:
        - docker/nodejsbusybox
    environment:
      name: staging
      url: http://10.10.34.23:3015/